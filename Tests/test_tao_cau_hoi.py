import pytest
import time
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from Pages.login_page import LoginPage
from selenium.webdriver.support.ui import Select
from selenium.common.exceptions import TimeoutException
from Pages.utils import get_wait

# ==============================
# Data cho t·ª´ng lo·∫°i c√¢u h·ªèi
# ==============================
question_data = [
    ("mot_lua_chon", {
        "noi_dung": "Ch·ªçn ƒë√°p √°n ƒë√∫ng: 2 + 2 = ?",
        "dap_an": ["2", "3", "4"],
        "dung": "4"
    }),
    ("dien_khuyet", {
        "noi_dung": "1 + 1 = ___",
        "dap_an": ["2"]
    }),
    ("ghep_noi", {
        "noi_dung": "Gh√©p c·∫∑p ƒë√∫ng",
        "dap_an": [("H√† N·ªôi", "Vi·ªát Nam"), ("Tokyo", "Nh·∫≠t B·∫£n")]
    }),
    ("tu_luan", {
        "noi_dung": "Em h√£y vi·∫øt ƒëo·∫°n vƒÉn ng·∫Øn t·∫£ ng√¥i tr∆∞·ªùng c·ªßa em.",
        "dap_an": None
    }),
]

# ==============================
# Fixture m·ªü Chrome
# ==============================
@pytest.fixture
def driver():
    options = webdriver.ChromeOptions()
    options.add_argument("--start-maximized")
    driver = webdriver.Chrome(options=options)
    yield driver
    driver.quit()

# ==============================
# C√°c h√†m thao t√°c chung
# ==============================
def go_to_question_bank(driver):
    wait = get_wait(driver)
    menu = wait.until(EC.element_to_be_clickable((By.XPATH, "//p[normalize-space()='Ng√¢n h√†ng c√¢u h·ªèi']")))
    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", menu)
    driver.execute_script("arguments[0].click();", menu)
    wait.until(EC.url_to_be("https://school-beta.edulive.net/giao-vien/ngan-hang-cau-hoi"))
    print("‚úÖ V√†o trang Ng√¢n h√†ng c√¢u h·ªèi")

def open_add_topic_modal(driver):
    wait = get_wait(driver)
    driver.execute_script("arguments[0].click();", wait.until(EC.element_to_be_clickable((By.XPATH, "//button[contains(text(),'T·∫°o c√¢u h·ªèi m·ªõi')]"))))
    driver.execute_script("arguments[0].click();", wait.until(EC.element_to_be_clickable((By.XPATH, "//p[@class='text-sm']"))))
    print("‚úÖ M·ªü modal t·∫°o c√¢u h·ªèi m·ªõi")

def select_parent_option(driver, parent_title):
    wait = get_wait(driver)
    parent_btn = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, f"button[title='{parent_title}']")))
    driver.execute_script("arguments[0].click();", parent_btn)
    time.sleep(1)
    print(f"‚úÖ Ch·ªçn ch·ªß ƒë·ªÅ cha: {parent_title}")

def chon_muc_do(driver, level: int):
    wait = get_wait(driver)
    button = wait.until(EC.element_to_be_clickable((By.XPATH, f"(//div[contains(@class,'col-span-1 flex flex-col gap-1.5')]//button)[{level}]")))
    driver.execute_script("arguments[0].click();", button)
    print(f"‚úÖ Ch·ªçn m·ª©c ƒë·ªô {level}")

def chon_loai_cau_hoi(driver, loai):
    if loai == "mot_lua_chon":
        css = "button[title='M·ªôt l·ª±a ch·ªçn']"
    elif loai == "dien_khuyet":
        css = "button[title='ƒêi·ªÅn v√†o ch·ªó tr·ªëng']"
    elif loai == "ghep_noi":
        css = "button[title='Gh√©p n·ªëi']"
    elif loai == "tu_luan":
        css = "button[title='T·ª± lu·∫≠n']"
    else:
        raise ValueError(f"Lo·∫°i c√¢u h·ªèi kh√¥ng h·ªó tr·ª£: {loai}")

    WebDriverWait(driver, 20).until(
        EC.element_to_be_clickable((By.CSS_SELECTOR, css))
    ).click()

def nhap_noi_dung(driver, text):
    text_area = WebDriverWait(driver, 20).until(
        EC.presence_of_element_located((By.XPATH, "//textarea[@placeholder='Nh·∫≠p n·ªôi dung c√¢u h·ªèi']"))
    )
    text_area.clear()
    text_area.send_keys(text)

def nhap_dap_an(driver, loai, dap_an, dung=None):
    if loai == "mot_lua_chon":
        for i, val in enumerate(dap_an):
            input_box = WebDriverWait(driver, 20).until(
                EC.presence_of_element_located((By.XPATH, f"(//input[@placeholder='Nh·∫≠p ƒë√°p √°n'])[{i+1}]"))
            )
            input_box.clear()
            input_box.send_keys(val)

        # ch·ªçn ƒë√°p √°n ƒë√∫ng (theo tham s·ªë dung)
        correct = dung if dung else dap_an[0]
        correct_radio = WebDriverWait(driver, 20).until(
            EC.element_to_be_clickable((By.XPATH, f"//label[contains(.,'{correct}')]/preceding-sibling::input[@type='radio']"))
        )
        driver.execute_script("arguments[0].click();", correct_radio)

    elif loai == "dien_khuyet":
        # n·∫øu c√≥ √¥ nh·∫≠p ƒë√°p √°n ƒë√∫ng th√¨ ƒëi·ªÅn
        for i, val in enumerate(dap_an):
            input_box = WebDriverWait(driver, 20).until(
                EC.presence_of_element_located((By.XPATH, f"(//input[@placeholder='Nh·∫≠p ƒë√°p √°n ƒë√∫ng'])[{i+1}]"))
            )
            input_box.clear()
            input_box.send_keys(val)

    elif loai == "ghep_noi":
        for i, (left, right) in enumerate(dap_an):
            left_box = WebDriverWait(driver, 20).until(
                EC.presence_of_element_located((By.XPATH, f"(//input[@placeholder='Thu·ªôc t√≠nh A'])[{i+1}]"))
            )
            right_box = WebDriverWait(driver, 20).until(
                EC.presence_of_element_located((By.XPATH, f"(//input[@placeholder='Thu·ªôc t√≠nh B'])[{i+1}]"))
            )
            left_box.clear()
            right_box.clear()
            left_box.send_keys(left)
            right_box.send_keys(right)

    elif loai == "tu_luan":
        # T·ª± lu·∫≠n kh√¥ng c√≥ ƒë√°p √°n
        pass

def save_question(driver):
    WebDriverWait(driver, 20).until(
        EC.element_to_be_clickable((By.XPATH, "//button[contains(.,'L∆∞u')]"))
    ).click()
    time.sleep(2)

def check_question_exists(driver, text):
    try:
        WebDriverWait(driver, 10).until(
            EC.presence_of_element_located((By.XPATH, f"//td[contains(.,'{text}')]"))
        )
        return True
    except:
        return False

# ==============================
# Test parametrize
# ==============================
@pytest.mark.parametrize("loai,data", question_data)
def test_tao_cau_hoi(driver, loai, data):
    login(driver, "daotc@el.net", "123456")   # üëâ s·ª≠a email/password th·∫≠t ·ªü ƒë√¢y
    open_question_bank(driver)
    open_create_modal(driver)
    chon_loai_cau_hoi(driver, loai)
    nhap_noi_dung(driver, data["noi_dung"])
    nhap_dap_an(driver, loai, data["dap_an"], data.get("dung"))
    save_question(driver)

    assert check_question_exists(driver, data["noi_dung"])
