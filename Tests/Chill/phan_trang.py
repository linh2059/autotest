import pytest
import time
import json
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from Pages.login_page import LoginPage
from tabulate import tabulate
from datetime import datetime, timezone, timedelta
from selenium.webdriver.support.ui import Select, WebDriverWait

def go_to_question_bank(driver):
    """M·ªü menu Ng√¢n h√†ng c√¢u h·ªèi v√† ch·ªù trang load xong.
       (Gi·ªØ nguy√™n nh∆∞ UI th·ª±c t·∫ø c·ªßa b·∫°n)."""
    wait = WebDriverWait(driver, 20)
    # XPATH menu c√≥ th·ªÉ kh√°c ‚Äî ch·ªânh l·∫°i n·∫øu project b·∫°n kh√°c selector
    menu = wait.until(EC.element_to_be_clickable(
        (By.XPATH, "//span[contains(text(),'Ng√¢n h√†ng c√¢u h·ªèi')]")
    ))
    # scroll + click b·∫±ng JS ƒë·ªÉ tr√°nh element b·ªã che
    driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", menu)
    driver.execute_script("arguments[0].click();", menu)
    # ch·ªù URL ch√≠nh x√°c (ho·∫∑c d√πng url_contains n·∫øu c√≥ params)
    wait.until(EC.url_to_be("https://school-beta.edulive.net/giao-vien/ngan-hang-cau-hoi"))
    print("‚úÖ V√†o trang Ng√¢n h√†ng c√¢u h·ªèi")


def get_pagination_info(driver):
    """Tr·∫£ v·ªÅ s·ªë d√≤ng + danh s√°ch trang + trang hi·ªán t·∫°i"""
    rows = driver.find_elements(By.XPATH, "//table/tbody/tr")
    row_count = len(rows)

    page_buttons = driver.find_elements(By.XPATH, "//nav//button")
    pages = []
    current_page = None

    for btn in page_buttons:
        text = btn.text.strip()
        classes = btn.get_attribute("class")

        if not text.isdigit():
            continue

        pages.append(int(text))
        if "bg-brand-900" in classes and "text-brand-50" in classes:
            current_page = int(text)

    return {
        "row_count": row_count,
        "pages": pages,
        "current_page": current_page
    }


def go_to_page(driver, page_num):
    """Click sang trang page_num"""
    wait = WebDriverWait(driver, 10)
    # t√¨m button ch·ª©a ƒë√∫ng s·ªë trang
    btn = wait.until(
        EC.element_to_be_clickable((By.XPATH, f"//nav//button[normalize-space(text())='{page_num}']"))
    )
    btn.click()
    time.sleep(2)  # ch·ªù table load l·∫°i


def read_all_pages(driver):
    """Duy·ªát to√†n b·ªô ph√¢n trang v√† in data"""
    info = get_pagination_info(driver)
    print("üìÑ Danh s√°ch trang:", info["pages"])

    all_data = []

    for p in info["pages"]:
        go_to_page(driver, p)
        # sau khi click th√¨ l·∫•y l·∫°i row
        rows = driver.find_elements(By.XPATH, "//table/tbody/tr")
        page_data = [[c.text.strip() for c in r.find_elements(By.TAG_NAME, "td")] for r in rows]
        all_data.extend(page_data)

        print(f"‚úÖ Trang {p} c√≥ {len(page_data)} d√≤ng")

    return all_data

def get_page_size_options(driver):
    """ƒê·ªçc ra danh s√°ch s·ªë b·∫£n ghi/trang"""
    select_elem = WebDriverWait(driver, 10).until(
        EC.presence_of_element_located((By.XPATH, "//select[contains(@class,'select-element-custom')]"))
    )
    select = Select(select_elem)
    options = [opt.text.strip() for opt in select.options]
    return options

def set_page_size(driver, size_value):
    """
    Ch·ªçn s·ªë b·∫£n ghi/trang.
    size_value: c√≥ th·ªÉ l√† 10, 20, 50, 100
    """
    select_elem = WebDriverWait(driver, 10).until(
        EC.element_to_be_clickable((By.XPATH, "//select[contains(@class,'select-element-custom')]"))
    )
    select = Select(select_elem)
    select.select_by_value(str(size_value))  # ch·ªçn theo value
    time.sleep(2)  # ch·ªù b·∫£ng reload
    print(f"‚úÖ ƒê√£ ch·ªçn hi·ªÉn th·ªã {size_value} / Trang")

@pytest.mark.usefixtures("driver")
def test_tao_cau_hoi_complete(driver):
    login_page = LoginPage(driver)
    login_page.login("daotc@el.net", "123456")
    go_to_question_bank(driver)

    time.sleep(5)  # ƒë·ª£i API load
    # info = get_pagination_info(driver)
    # print("üîé S·ªë d√≤ng hi·ªán t·∫°i:", info["row_count"])
    # print("üìÑ Danh s√°ch trang:", info["pages"])
    # print("‚úÖ ƒêang ·ªü trang:", info["current_page"])

    # all_rows = read_all_pages(driver)
    # print("üìä T·ªïng s·ªë d√≤ng l·∫•y ƒë∆∞·ª£c:", len(all_rows))

    options = get_page_size_options(driver)
    print("üìå C√°c l·ª±a ch·ªçn hi·ªÉn th·ªã:", options)

    for opt in [10, 20, 50, 100]:
        set_page_size(driver, opt)
        rows = driver.find_elements(By.XPATH, "//table/tbody/tr")
        print(f"Trang ƒëang hi·ªÉn th·ªã {len(rows)} d√≤ng (mong mu·ªën ‚â§ {opt})")
    # # L·∫•y API + UI
    # api_questions = get_api_quizzes(driver)
    # ui_rows = get_question_table_ui(driver)

    # print(f"üì¶ API: {len(api_questions)} c√¢u h·ªèi")
    # print(f"üìä UI: {len(ui_rows)} c√¢u h·ªèi")
    

    # assert len(api_questions) == len(ui_rows), "‚ùå S·ªë l∆∞·ª£ng kh√¥ng kh·ªõp!"

    # # So s√°nh t·ª´ng d√≤ng
    # for i, (ui_row, api_item) in enumerate(zip(ui_rows, api_questions), start=1):
    #     expected = map_api_to_ui(api_item)

    #     # b·ªè qua c·ªôt cu·ªëi (H√†nh ƒë·ªông)
    #     ui_trimmed = ui_row[:6]

    #     print(f"üîé Row {i}:")
    #     print(f"   UI : {ui_trimmed}")
    #     print(f"   API: {expected[:6]}")

    #     assert ui_trimmed == expected[:6], f"‚ùå Sai l·ªách d·ªØ li·ªáu ·ªü row {i}"
