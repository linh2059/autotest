{"name": "test_add_topic", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x7ff7c1f6fc95+79861]\n\tGetHandleVerifier [0x0x7ff7c1f6fcf0+79952]\n\t(No symbol) [0x0x7ff7c1cecada]\n\t(No symbol) [0x0x7ff7c1d44457]\n\t(No symbol) [0x0x7ff7c1d4471c]\n\t(No symbol) [0x0x7ff7c1d98217]\n\t(No symbol) [0x0x7ff7c1d6cb1f]\n\t(No symbol) [0x0x7ff7c1d94f8b]\n\t(No symbol) [0x0x7ff7c1d6c8b3]\n\t(No symbol) [0x0x7ff7c1d35272]\n\t(No symbol) [0x0x7ff7c1d36043]\n\tGetHandleVerifier [0x0x7ff7c222b9cd+2946349]\n\tGetHandleVerifier [0x0x7ff7c2225c4a+2922410]\n\tGetHandleVerifier [0x0x7ff7c22459d7+3052855]\n\tGetHandleVerifier [0x0x7ff7c1f8aa7e+189918]\n\tGetHandleVerifier [0x0x7ff7c1f92a1f+222591]\n\tGetHandleVerifier [0x0x7ff7c1f78ab4+116244]\n\tGetHandleVerifier [0x0x7ff7c1f78c69+116681]\n\tGetHandleVerifier [0x0x7ff7c1f5f048+11176]\n\tBaseThreadInitThunk [0x0x7ffb594b7374+20]\n\tRtlUserThreadStart [0x0x7ffb5a9bcc91+33]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"18f40836436687ea7ac7bf555255072e\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    def test_add_topic(driver):\n        helper = QuestionBankHelper(driver)\n        login_page = LoginPage(driver)\n        login_page.login(\"daotc@el.net\", \"123456\")\n        helper.go_to_question_bank()\n        helper.open_add_topic_modal()\n        helper.new_topic(\"Chủ đề Test\")\n        helper.submit_new_topic()\n>       error = helper.get_error_message()\n                ^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTests\\Question\\Danh_sach.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nTests\\Question\\utils\\question_bank_helper.py:46: in get_error_message\n    error_el = WebDriverWait(self.driver, 5).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"18f40836436687ea7ac7bf555255072e\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000001982F5E0540>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7c1f6fc95+79861]\nE       \tGetHandleVerifier [0x0x7ff7c1f6fcf0+79952]\nE       \t(No symbol) [0x0x7ff7c1cecada]\nE       \t(No symbol) [0x0x7ff7c1d44457]\nE       \t(No symbol) [0x0x7ff7c1d4471c]\nE       \t(No symbol) [0x0x7ff7c1d98217]\nE       \t(No symbol) [0x0x7ff7c1d6cb1f]\nE       \t(No symbol) [0x0x7ff7c1d94f8b]\nE       \t(No symbol) [0x0x7ff7c1d6c8b3]\nE       \t(No symbol) [0x0x7ff7c1d35272]\nE       \t(No symbol) [0x0x7ff7c1d36043]\nE       \tGetHandleVerifier [0x0x7ff7c222b9cd+2946349]\nE       \tGetHandleVerifier [0x0x7ff7c2225c4a+2922410]\nE       \tGetHandleVerifier [0x0x7ff7c22459d7+3052855]\nE       \tGetHandleVerifier [0x0x7ff7c1f8aa7e+189918]\nE       \tGetHandleVerifier [0x0x7ff7c1f92a1f+222591]\nE       \tGetHandleVerifier [0x0x7ff7c1f78ab4+116244]\nE       \tGetHandleVerifier [0x0x7ff7c1f78c69+116681]\nE       \tGetHandleVerifier [0x0x7ff7c1f5f048+11176]\nE       \tBaseThreadInitThunk [0x0x7ffb594b7374+20]\nE       \tRtlUserThreadStart [0x0x7ffb5a9bcc91+33]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "attachments": [{"name": "stdout", "source": "a16f71a3-b191-4a11-ad95-bc0f13348182-attachment.txt", "type": "text/plain"}], "start": 1759377719742, "stop": 1759377728549, "uuid": "3b203ef6-a868-4491-b17b-745f1abdc2d1", "historyId": "61d941336c424c369b2ab4f7c3c79a4a", "testCaseId": "61d941336c424c369b2ab4f7c3c79a4a", "fullName": "Tests.Question.Danh_sach#test_add_topic", "labels": [{"name": "parentSuite", "value": "Tests.Question"}, {"name": "suite", "value": "Danh_sach"}, {"name": "host", "value": "DESKTOP-TCGMAOT"}, {"name": "thread", "value": "8540-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.Question.Danh_sach"}], "titlePath": ["Tests", "Question", "Danh_sach.py"]}