{"name": "test_add_topic", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.JavascriptException: Message: javascript error: arguments[0].click is not a function\n  (Session info: chrome=140.0.7339.208)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff7d747fc95+79861]\n\tGetHandleVerifier [0x0x7ff7d747fcf0+79952]\n\t(No symbol) [0x0x7ff7d71fcada]\n\t(No symbol) [0x0x7ff7d720461a]\n\t(No symbol) [0x0x7ff7d7207a51]\n\t(No symbol) [0x0x7ff7d72a630b]\n\t(No symbol) [0x0x7ff7d727cada]\n\t(No symbol) [0x0x7ff7d72a4f8b]\n\t(No symbol) [0x0x7ff7d727c8b3]\n\t(No symbol) [0x0x7ff7d7245272]\n\t(No symbol) [0x0x7ff7d7246043]\n\tGetHandleVerifier [0x0x7ff7d773b9cd+2946349]\n\tGetHandleVerifier [0x0x7ff7d7735c4a+2922410]\n\tGetHandleVerifier [0x0x7ff7d77559d7+3052855]\n\tGetHandleVerifier [0x0x7ff7d749aa7e+189918]\n\tGetHandleVerifier [0x0x7ff7d74a2a1f+222591]\n\tGetHandleVerifier [0x0x7ff7d7488ab4+116244]\n\tGetHandleVerifier [0x0x7ff7d7488c69+116681]\n\tGetHandleVerifier [0x0x7ff7d746f048+11176]\n\tBaseThreadInitThunk [0x0x7ffb594b7374+20]\n\tRtlUserThreadStart [0x0x7ffb5a9bcc91+33]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"22f92f5d8a8cd6bfb9324c07b14bce69\")>\n\n    @pytest.mark.usefixtures(\"driver\")\n    def test_add_topic(driver):\n        helper = QuestionBankHelper(driver)\n        login_page = LoginPage(driver)\n        login_page.login(\"daotc@el.net\", \"123456\")\n        helper.go_to_question_bank()\n>       click_all_delete_icons(driver)\n\nTests\\Question\\Danh_sach.py:43: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nTests\\Question\\Danh_sach.py:19: in click_all_delete_icons\n    driver.execute_script(\"arguments[0].click();\", delete_buttons)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:555: in execute_script\n    return self.execute(command, {\"script\": script, \"args\": converted_args})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000021F42070050>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"javascript error\",\"message\":\"javascript error: arguments[0].click is not ...ff7d746f048+11176]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffb594b7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffb5a9bcc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.JavascriptException: Message: javascript error: arguments[0].click is not a function\nE         (Session info: chrome=140.0.7339.208)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff7d747fc95+79861]\nE       \tGetHandleVerifier [0x0x7ff7d747fcf0+79952]\nE       \t(No symbol) [0x0x7ff7d71fcada]\nE       \t(No symbol) [0x0x7ff7d720461a]\nE       \t(No symbol) [0x0x7ff7d7207a51]\nE       \t(No symbol) [0x0x7ff7d72a630b]\nE       \t(No symbol) [0x0x7ff7d727cada]\nE       \t(No symbol) [0x0x7ff7d72a4f8b]\nE       \t(No symbol) [0x0x7ff7d727c8b3]\nE       \t(No symbol) [0x0x7ff7d7245272]\nE       \t(No symbol) [0x0x7ff7d7246043]\nE       \tGetHandleVerifier [0x0x7ff7d773b9cd+2946349]\nE       \tGetHandleVerifier [0x0x7ff7d7735c4a+2922410]\nE       \tGetHandleVerifier [0x0x7ff7d77559d7+3052855]\nE       \tGetHandleVerifier [0x0x7ff7d749aa7e+189918]\nE       \tGetHandleVerifier [0x0x7ff7d74a2a1f+222591]\nE       \tGetHandleVerifier [0x0x7ff7d7488ab4+116244]\nE       \tGetHandleVerifier [0x0x7ff7d7488c69+116681]\nE       \tGetHandleVerifier [0x0x7ff7d746f048+11176]\nE       \tBaseThreadInitThunk [0x0x7ffb594b7374+20]\nE       \tRtlUserThreadStart [0x0x7ffb5a9bcc91+33]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: JavascriptException"}, "attachments": [{"name": "stdout", "source": "3edc843b-cfe5-47a5-b1a8-41dc62ff2688-attachment.txt", "type": "text/plain"}], "start": 1759378560739, "stop": 1759378564289, "uuid": "5e2afc7c-120e-47c5-9cd2-60149a3a7723", "historyId": "61d941336c424c369b2ab4f7c3c79a4a", "testCaseId": "61d941336c424c369b2ab4f7c3c79a4a", "fullName": "Tests.Question.Danh_sach#test_add_topic", "labels": [{"name": "parentSuite", "value": "Tests.Question"}, {"name": "suite", "value": "Danh_sach"}, {"name": "host", "value": "DESKTOP-TCGMAOT"}, {"name": "thread", "value": "9596-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "Tests.Question.Danh_sach"}], "titlePath": ["Tests", "Question", "Danh_sach.py"]}